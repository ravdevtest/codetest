package ravelin.codetest.backend.service;

import java.util.HashMap;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import ravelin.codetest.backend.model.Data;
import ravelin.codetest.backend.model.request.CopyAndPasteRequest;
import ravelin.codetest.backend.model.request.Request;
import ravelin.codetest.backend.model.request.ResizeRequest;
import ravelin.codetest.backend.model.request.SubmitTimeRequest;

// Since the specification is a bit contradictory:
// "Each request forms part of a struct 
// (for that particular visitor) that will be printed to the terminal
// when the struct is fully complete."
// and
// "Print the struct for each stage of its construction."
// I decided the latter.
@Component
public class DataService {

    private Map<String, Data> sessionData;

    @Autowired
    public DataService() {
        sessionData = new HashMap<>();
    }

    public void updateData(CopyAndPasteRequest req) {
        Data data = getData(req);
        data.addCopyAndPaste(req.getFormId());
        System.out.println(data);
    }

    public void updateData(ResizeRequest req) {
        Data data = getData(req);
        if (data.getResizeFrom() != null) {
            throw new IllegalStateException("Resize can occur only once.");
        }
        data.setResizeFrom(req.getResizeFrom());
        data.setResizeTo(req.getResizeTo());
        System.out.println(data);
    }

    public void updateData(SubmitTimeRequest req) {
        Data data = getData(req);
        data.setFormCompletionTime(req.getTime());
        System.out.println(data);

        // since it was completed, we don't longer want to keep it,
        // as it may interfere with a new data of the same id, for example
        // generated by the same user (same session) with a second form
        sessionData.remove(getDataId(req));
    }

    private String getDataId(Request req) {
        return req.getWebsiteUrl() + req.getSessionId();
    }

    private Data getData(Request req) {
        if (req.getWebsiteUrl() == null || req.getSessionId() == null) {
            throw new IllegalArgumentException("Website URL and session id cannot be null!");
        }

        String id = getDataId(req);
        if (!sessionData.containsKey(id)) {
            sessionData.put(id, new Data(req.getWebsiteUrl(), req.getSessionId()));
        }

        return sessionData.get(id);
    }

}
